
Here is a plain Jenkins pipeline script without any headings, description, or notes to provision an AWS EC2 instance using Terraform:
```bash
#!/bin/bash

provider "aws" {
  region = "us-east-1"
}

resource "aws_instance" "example" {
  ami           = "ami-0c7217cdde317cfec"
  instance_type = "t2.micro"
  key_name      = "nextgen-devops-team"
  subnet_id     = "subnet-09bb946c638fdd9a3"
  security_groups = [
    "nextgen-devops-sg",
  ]
}

resource "null_resource" "example" {
  provisioner "local-exec" {
    command = "echo 'Hello World!' > /tmp/hello"
  }
}

resource "aws_ebs" "example" {
  count = 1

  availability_zone = "us-east-1a"
  volume_type        = "gp2"
  size                 = 30
}

resource "aws_image" "example" {
  name             = "example-image"
  description       = "Example image"
  owner_id          = "123456789012"
  image_location    = "ami-0c7217cdde317cfec"
}
```
This script uses the `aws` provider to define an EC2 instance with a specific AMI, key pair, and security group. It also defines an EBS volume with a specific size. Finally, it defines an image resource with a name, description, owner ID, and image location.

To apply this script using Jenkins, you can create a new free-form job and add the script as a build step. You can then configure the job to use the AWS plugin to execute the script on an EC2 instance.

Note that this script assumes that you have already set up your AWS credentials on your Jenkins instance. If you haven't done so, you will need to configure your AWS credentials before running this script.
